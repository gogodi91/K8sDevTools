apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-casc
  labels:
    app: {{ template "jenkins.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data: 
  jenkins.yaml: |-
    # security:
    #   remotingCLI:
    #     enabled: false
    credentials:
      system:
        domainCredentials:
          - credentials:
            - usernamePassword:
                scope: GLOBAL
                id: nexus-deployment-credential
                username: nexus
                password: "${NEXUS_PASSWORD}"
            {{- if .Values.global.tools.sonarqube.enable }}
            - string:
                scope: GLOBAL
                id: sonar-token
                secret: "${SONAR_AUTH_TOKEN}"
            {{- end }}
    jenkins:
      agentProtocols:
      - "JNLP4-connect"
      - "Ping"
      slaveAgentPort: 8443
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      disableRememberMe: false
      mode: NORMAL
      numExecutors: 1
      primaryView:
        all:
          name: "all"
      quietPeriod: 5
      remotingSecurity:
        enabled: true
      scmCheckoutRetryCount: 0
      securityRealm:
        ldap:
          configurations:
          - displayNameAttributeName: "${LDAP_DISPLAY_NAME_ATTRIBUTE_NAME}"
            groupSearchBase: "${LDAP_GROUP_BASE_DN}"
            inhibitInferRootDN: "${LDAP_INHIBIT_INFER_ROOTDN}"
            managerDN: "cn=${LDAP_ADMIN},${LDAP_ROOTDN}"
            managerPasswordSecret: "${LDAP_MANAGER_PASSWORD}"
            rootDN: "${LDAP_ROOTDN}"
            server: "${LDAP_SERVER}"
            userSearchBase: "${LDAP_USER_BASE_DN}"
            userSearch: "${LDAP_USER_SEARCH}"
          disableMailAddressResolver: false
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
      clouds:
      - kubernetes:
          name: "devtools-kubernetes"
          containerCap: 10
          containerCapStr: "10"
          # containerCapStr: "10"
          # jenkinsTunnel: "jenkins-master.{{ .Release.Namespace }}.svc.cluster.local:8443"
          # jenkinsUrl: "jenkins-master.{{ .Release.Namespace }}.svc.cluster.local:8080/jenkins"
          # maxRequestsPerHostStr: "32"
          # name: "kubernetes"
          # namespace: "jenkins-slaves-namespace"
          # serverUrl: "https://kubernetes.default.svc.cluster.local"
          # skipTlsVerify: true
          # templates:
          # - containers:
          #   - args: ""
          #     command: ""
          #     envVars:
          #     - envVar:
          #         key: "JENKINS_URL"
          #         value: "http://jenkins-master.default.svc.cluster.local:8080/jenkins"
          #     image: "jenkins/jnlp-slave:3.27-1"
          #     livenessProbe:
          #       failureThreshold: 0
          #       initialDelaySeconds: 0
          #       periodSeconds: 0
          #       successThreshold: 0
          #       timeoutSeconds: 0
          #     name: "jnlp-slave"
          #     resourceLimitCpu: "300m"
          #     resourceLimitMemory: "316Mi"
          #     resourceRequestCpu: "200m"
          #     resourceRequestMemory: "256Mi"
          #   label: "jenkins-slave"
          #   name: "devtools-jenkins-slave"
          #   namespace: "jenkins-slaves-namespace"
          #   nodeUsageMode: NORMAL
          #   workspaceVolume:
          #     emptyDirWorkspaceVolume:
          #       memory: false
      updateCenter:
        sites:
        - id: "default"
          url: "https://updates.jenkins.io/update-center.json"
      views:
      - all:
          name: "all"
    unclassified:
      {{- if .Values.global.tools.sonarqube.enable }}
      sonarGlobalConfiguration:
        buildWrapperEnabled: false
        installations:
        - name: "(Kubernetes) DevTools Sonar"
          additionalAnalysisProperties: ""
          additionalProperties: ""
          credentialsId: "sonar-token"
          mojoVersion: ""
          serverAuthenticationToken: ""
          serverUrl: "http://${SONAR_SERVER_URL}"
          triggers:
            envVar: ""
            skipScmCause: false
            skipUpstreamCause: false
      {{- end }}
    tool:
      {{- if .Values.global.tools.sonarqube.enable }}
      sonarRunnerInstallation:
        installations:
        - name: "(Kubernetes) DevTools SonarScanner"
          home: ""
          properties:
          - installSource:
              installers:
              - sonarRunnerInstaller:
                  id: "4.6.0.2311"
              - sonarRunnerInstaller:
                  id: "${SONAR_RUNNER_VERSION}"
      {{- end }}